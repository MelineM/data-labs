<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>ContentFilters</key>
	<dict/>
	<key>auto_connect</key>
	<true/>
	<key>data</key>
	<dict>
		<key>connection</key>
		<dict>
			<key>database</key>
			<string>publications</string>
			<key>host</key>
			<string>127.0.0.1</string>
			<key>kcid</key>
			<string>8246762781608439685</string>
			<key>name</key>
			<string>localhost</string>
			<key>rdbms_type</key>
			<string>mysql</string>
			<key>sslCACertFileLocation</key>
			<string></string>
			<key>sslCACertFileLocationEnabled</key>
			<integer>0</integer>
			<key>sslCertificateFileLocation</key>
			<string></string>
			<key>sslCertificateFileLocationEnabled</key>
			<integer>0</integer>
			<key>sslKeyFileLocation</key>
			<string></string>
			<key>sslKeyFileLocationEnabled</key>
			<integer>0</integer>
			<key>type</key>
			<string>SPTCPIPConnection</string>
			<key>useSSL</key>
			<integer>0</integer>
			<key>user</key>
			<string>root</string>
		</dict>
		<key>session</key>
		<dict>
			<key>connectionEncoding</key>
			<string>utf8mb4</string>
			<key>contentFilterV2</key>
			<dict>
				<key>children</key>
				<array/>
				<key>filterClass</key>
				<string>groupNode</string>
				<key>isConjunction</key>
				<true/>
			</dict>
			<key>contentPageNumber</key>
			<integer>1</integer>
			<key>contentSelection</key>
			<data>
			YnBsaXN0MDDUAQIDBAUGJCVYJHZlcnNpb25YJG9iamVjdHNZJGFy
			Y2hpdmVyVCR0b3ASAAGGoKgHCBMUFRYaIVUkbnVsbNMJCgsMDxJX
			TlMua2V5c1pOUy5vYmplY3RzViRjbGFzc6INDoACgAOiEBGABIAF
			gAdUdHlwZVRyb3dzXxAdU2VsZWN0aW9uRGV0YWlsVHlwZU5TSW5k
			ZXhTZXTSFwsYGVxOU1JhbmdlQ291bnQQAIAG0hscHR5aJGNsYXNz
			bmFtZVgkY2xhc3Nlc1pOU0luZGV4U2V0oh8gWk5TSW5kZXhTZXRY
			TlNPYmplY3TSGxwiI1xOU0RpY3Rpb25hcnmiIiBfEA9OU0tleWVk
			QXJjaGl2ZXLRJidUZGF0YYABAAgAEQAaACMALQAyADcAQABGAE0A
			VQBgAGcAagBsAG4AcQBzAHUAdwB8AIEAoQCmALMAtQC3ALwAxwDQ
			ANsA3gDpAPIA9wEEAQcBGQEcASEAAAAAAAACAQAAAAAAAAAoAAAA
			AAAAAAAAAAAAAAABIw==
			</data>
			<key>contentSortColIsAsc</key>
			<true/>
			<key>contentViewport</key>
			<string>{{0, 0}, {695, 481}}</string>
			<key>isToolbarVisible</key>
			<true/>
			<key>queries</key>
			<string># Challenge 1
# Step 1: Calculate the royalty of each sale for each author and the advance for each author and publication

select ta.title_id, ta.au_id, (t.price*s.qty*t.royalty*ta.royaltyper/10000) as sales_royalty, (t.advance*ta.royaltyper/100) as advance
from titleauthor ta
inner join titles t on t.title_id = ta.title_id
inner join sales s on s.title_id = ta.title_id
order by ta.title_id, ta.au_id;

# Step 2: Aggregate the total royalties for each title and author
select title_id, au_id, sum(sales_royalty) as total_royalty, advance
from
(select ta.title_id, ta.au_id, (t.price * s.qty * t.royalty * ta.royaltyper / 10000) as sales_royalty, (t.advance * ta.royaltyper / 100) as advance
from titleauthor ta
inner join titles t on t.title_id = ta.title_id
inner join sales s on s.title_id = ta.title_id
order by ta.title_id, ta.au_id) new_table
group by au_id, title_id;


# Step 3: Calculate the total profits of each author

select au_id, sum(total_royalty+advance) total_profit
from
(select title_id, au_id, sum(sales_royalty) as total_royalty, advance
from
(select ta.title_id, ta.au_id, (t.price * s.qty * t.royalty * ta.royaltyper / 10000) as sales_royalty, (t.advance * ta.royaltyper / 100) as advance
from titleauthor ta
inner join titles t on t.title_id = ta.title_id
inner join sales s on s.title_id = ta.title_id
order by ta.title_id, ta.au_id) new_table
group by au_id, title_id) second_table
group by au_id
order by total_profit desc
limit 3;

# Challenge 2

create temporary table temp_table_1
select ta.title_id, ta.au_id, (t.price*s.qty*t.royalty*ta.royaltyper/10000) as sales_royalty, (t.advance*ta.royaltyper/100) as advance
from titleauthor ta
inner join titles t on t.title_id = ta.title_id
inner join sales s on s.title_id = ta.title_id
order by ta.title_id, ta.au_id;

create temporary table temp_table_2
select title_id, au_id, sum(sales_royalty) as total_royalty, advance
from
(select ta.title_id, ta.au_id, (t.price * s.qty * t.royalty * ta.royaltyper / 10000) as sales_royalty, (t.advance * ta.royaltyper / 100) as advance
from titleauthor ta
inner join titles t on t.title_id = ta.title_id
inner join sales s on s.title_id = ta.title_id
order by ta.title_id, ta.au_id) new_table
group by au_id, title_id;

create temporary table temp_table_3
select au_id, sum(total_royalty + advance) as total_profit
from
(select title_id, au_id, sum(sales_royalty) as total_royalty, advance
from
(select ta.title_id, ta.au_id, (t.price * s.qty * t.royalty * ta.royaltyper / 10000) as sales_royalty, (t.advance * ta.royaltyper / 100) as advance
from titleauthor ta
inner join titles t on t.title_id = ta.title_id
inner join sales s on s.title_id = ta.title_id
order by ta.title_id, ta.au_id) new_table
group by au_id, title_id) second_table
group by au_id
order by total_profit desc
limit 3;
select * from temp_table_3;

# Challenge 3

create table most_profiting_authors
select * from temp_table_3;
select * from most_profiting_authors;
</string>
			<key>view</key>
			<string>SP_VIEW_CUSTOMQUERY</string>
			<key>windowVerticalDividerPosition</key>
			<real>214</real>
		</dict>
	</dict>
	<key>encrypted</key>
	<false/>
	<key>format</key>
	<string>connection</string>
	<key>queryFavorites</key>
	<array/>
	<key>queryHistory</key>
	<array>
		<string>create temporary table temp_table_3
select au_id, round(sum(total_royalty + advance)) as total_profit
from
(select title_id, au_id, sum(sales_royalty) as total_royalty, advance
from
(select ta.title_id, ta.au_id, (t.price * s.qty * t.royalty * ta.royaltyper / 10000) as sales_royalty, (t.advance * ta.royaltyper / 100) as advance
from titleauthor ta
inner join titles t on t.title_id = ta.title_id
inner join sales s on s.title_id = ta.title_id
order by ta.title_id, ta.au_id) new_table
group by au_id, title_id) second_table
group by au_id
order by total_profit desc
limit 3</string>
		<string>select * from temp_table_3</string>
		<string>select * from most_profiting_authors</string>
		<string># Challenge 3

create table most_profiting_authors
select * from temp_table_3</string>
		<string>select * temp_Table_3</string>
		<string>create temporary table temp_table_3
select au_id, sum(total_royalty + advance) as total_profit
from
(select title_id, au_id, sum(sales_royalty) as total_royalty, advance
from
(select ta.title_id, ta.au_id, (t.price * s.qty * t.royalty * ta.royaltyper / 10000) as sales_royalty, (t.advance * ta.royaltyper / 100) as advance
from titleauthor ta
inner join titles t on t.title_id = ta.title_id
inner join sales s on s.title_id = ta.title_id
order by ta.title_id, ta.au_id) new_table
group by au_id, title_id) second_table
group by au_id
order by total_profit desc
limit 3</string>
		<string>create table most_profiting_authors
select au_id, sum(total_royalty + advance) as total_profit
from temp_table_3

# Challenge 3</string>
		<string># Challenge 2

create temporary table temp_table_1
select ta.title_id, ta.au_id, (t.price*s.qty*t.royalty*ta.royaltyper/10000) as sales_royalty, (t.advance*ta.royaltyper/100) as advance
from titleauthor ta
inner join titles t on t.title_id = ta.title_id
inner join sales s on s.title_id = ta.title_id
order by ta.title_id, ta.au_id</string>
		<string># Step 3: Calculate the total profits of each author

select au_id, sum(total_royalty+advance) total_profit
from
(select title_id, au_id, sum(sales_royalty) as total_royalty, advance
from
(select ta.title_id, ta.au_id, (t.price * s.qty * t.royalty * ta.royaltyper / 10000) as sales_royalty, (t.advance * ta.royaltyper / 100) as advance
from titleauthor ta
inner join titles t on t.title_id = ta.title_id
inner join sales s on s.title_id = ta.title_id
order by ta.title_id, ta.au_id) new_table
group by au_id, title_id) second_table
group by au_id
order by total_profit desc
limit 3</string>
		<string># Step 2: Aggregate the total royalties for each title and author
select title_id, au_id, sum(sales_royalty) as total_royalty, advance
from
(select ta.title_id, ta.au_id, (t.price * s.qty * t.royalty * ta.royaltyper / 10000) as sales_royalty, (t.advance * ta.royaltyper / 100) as advance
from titleauthor ta
inner join titles t on t.title_id = ta.title_id
inner join sales s on s.title_id = ta.title_id
order by ta.title_id, ta.au_id) new_table
group by au_id, title_id</string>
		<string># Step 3: Calculate the total profits of each author

select au_id, sum(ssr+sales_advance) total_profit
from
(select title_id,au_id,sum(sales_royalty) as ssr, sales_advance
from
(select ta.title_id, ta.au_id, t.price*s.qty*t.royalty*ta.royaltyper/10000 as sales_royalty, t.advance*ta.royaltyper/100 as sales_advance
from titleauthor ta
inner join titles t on t.title_id=ta.title_id
inner join sales s on s.title_id=ta.title_id
order by ta.title_id, ta.au_id) new_table
group by title_id,au_id) second_table
group by au_id
order by total_profit desc
limit 3</string>
		<string># Step 2: Aggregate the total royalties for each title and author
select title_id, au_id, sum(sales_royalty) as ssr, sales_advance
from
(select ta.title_id, ta.au_id, (t.price*s.qty*t.royalty*ta.royaltyper/10000) as sales_royalty, (t.advance*ta.royaltyper/100) as sales_advance
from titleauthor ta
inner join titles t on t.title_id = ta.title_id
inner join sales s on s.title_id = ta.title_id
order by ta.title_id, ta.au_id) new_table
group by au_id, title_id</string>
		<string># Step 2: Aggregate the total royalties for each title and author
select title_id, au_id, sum(sales_royalty) as ssr, sales_advance
from
(select ta.title_id, ta.au_id, (t.price*s.qty*t.royalty*ta.royaltyper/10000) as sales_royalty, (t.advance*ta.royaltyper/100) as sales_advance
from titleauthor ta
inner join titles t on t.title_id = ta.title_id
inner join sales s on s.title_id = ta.title_id
order by ta.title_id, ta.au_id) new_table
group by au_id, title_id


# Step 3: Calculate the total profits of each author

select au_id, sum(ssr+sales_advance) total_profit
from
(select title_id,au_id,sum(sales_royalty) as ssr, sales_advance
from
(select ta.title_id, ta.au_id, t.price*s.qty*t.royalty*ta.royaltyper/10000 as sales_royalty, t.advance*ta.royaltyper/100 as sales_advance
from titleauthor ta
inner join titles t on t.title_id=ta.title_id
inner join sales s on s.title_id=ta.title_id
order by ta.title_id, ta.au_id) new_temporary
group by title_id,au_id) second_temporary
group by au_id
order by total_profit desc</string>
		<string>create temporary table new_temp(
select ta.title_id, ta.au_id, t.price*s.qty*t.royalty*ta.royaltyper/10000 as sales_royalty, t.advance*ta.royaltyper/100 as sales_advance
from titleauthor ta
inner join titles t on t.title_id=ta.title_id
inner join sales s on s.title_id=ta.title_id
order by ta.title_id, ta.au_id)</string>
		<string>create table new_table(
select au_id, sum(ssr+sales_advance) total_profit
from second_temp
group by au_id
order by total_profit desc)</string>
		<string>select au_id, sum(ssr+sales_advance) total_profit
from
(select title_id,au_id,sum(sales_royalty) as ssr, sales_advance
from
(select ta.title_id, ta.au_id, t.price*s.qty*t.royalty*ta.royaltyper/10000 as sales_royalty, t.advance*ta.royaltyper/100 as sales_advance
from titleauthor ta
inner join titles t on t.title_id=ta.title_id
inner join sales s on s.title_id=ta.title_id
order by ta.title_id, ta.au_id) new_temporary
group by title_id,au_id) second_temporary
group by au_id
order by total_profit desc</string>
		<string>#3 Calculate the total profits of each author

select second_table.au_id, round(sum(second_table.advance + second_table.total_royalty)) as total_profit
from
(select new_table.au_id, new_table.title_id, new_table.advance, sum(sales_royalty) as total_royalty
from
(select s.title_id, a.au_id, (t.advance * ta.royaltyper/100) as advance, (t.price * s.qty * t.royalty / 100 * ta.royaltyper / 100) as sales_royalty
from sales s
inner join titles t on s.title_id = t.title_id
inner join titleauthor ta on ta.title_id = s.title_id
inner join authors a on a.au_id = ta.au_id) as new_table
group by new_table.title_id, new_table.au_id) as second_table
group by second_table.au_id
order by total_profit DESC
limit 3</string>
		<string>#2 Aggregate the total royalties for each title and author

select new_table.au_id, new_table.title_id, new_table.advance, sum(sales_royalty) as total_royalty
from
(select s.title_id, a.au_id, (t.advance * ta.royaltyper/100) as advance, (t.price * s.qty * t.royalty / 100 * ta.royaltyper / 100) as sales_royalty
from sales s
inner join titles t on s.title_id = t.title_id
inner join titleauthor ta on ta.title_id = s.title_id
inner join authors a on a.au_id = ta.au_id) as new_table
group by new_table.title_id, new_table.au_id</string>
		<string># Challenge 1
#1 Calculate the royalty of each sale for each author and the advance for each author and publication

select s.title_id, a.au_id, (t.advance * ta.royaltyper/100) as advance, (t.price * s.qty * t.royalty / 100 * ta.royaltyper / 100) as sales_royalty
from sales s
inner join titles t on s.title_id = t.title_id
inner join titleauthor ta on ta.title_id = s.title_id
inner join authors a on a.au_id = ta.au_id
order by title_id, au_id</string>
		<string># Challenge 3

create table most_profiting_authors
select au_id, total_profit as profits from temp_table3</string>
	</array>
	<key>rdbms_type</key>
	<string>mysql</string>
	<key>rdbms_version</key>
	<string>8.0.17</string>
	<key>version</key>
	<integer>1</integer>
</dict>
</plist>
